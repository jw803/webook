// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	article4 "github.com/jw803/webook/internal/interface/event/article"
	article3 "github.com/jw803/webook/internal/interface/web/article"
	"github.com/jw803/webook/internal/interface/web/user"
	"github.com/jw803/webook/internal/pkg/ginx/jwt_handler"
	"github.com/jw803/webook/internal/repository"
	article2 "github.com/jw803/webook/internal/repository/article"
	"github.com/jw803/webook/internal/repository/cache"
	"github.com/jw803/webook/internal/repository/dao"
	"github.com/jw803/webook/internal/repository/dao/article"
	"github.com/jw803/webook/internal/service"
	"github.com/jw803/webook/ioc"
	"github.com/jw803/webook/pkg/samarax"
)

// Injectors from wire.go:

func InitAPP() *App {
	cmdable := ioc.InitRedis()
	jwtHandler := jwtx.NewRedisHandler(cmdable)
	logger := ioc.InitLogger()
	v := ioc.GinMiddlewares(jwtHandler, logger)
	db := ioc.InitDB()
	nowFunc := ioc.NewNowFunc()
	userDAO := dao.NewGORMUserDAO(db, logger, nowFunc)
	userCache := cache.NewRedisUserCache(cmdable)
	userRepository := repository.NewCachedUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository, logger)
	codeCache := cache.NewRedisCodeCache(cmdable, logger)
	codeRepository := repository.NewCachedCodeRepository(codeCache)
	smsService := ioc.InitSmsMemoryService(cmdable)
	codeService := service.NewSMSCodeService(codeRepository, smsService)
	userHandler := user.NewUserHandler(userService, codeService, jwtHandler, logger)
	articleDAO := article.NewGORMArticleDAO(db)
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleRepository := article2.NewArticleRepository(articleDAO, articleCache)
	articleService := service.NewArticleService(articleRepository)
	articleHandler := article3.NewArticleHandler(articleService, logger)
	v2 := ioc.InitWebServer(v, userHandler, articleHandler)
	interactiveDAO := dao.NewGORMInteractiveDAO(db)
	interactiveCache := cache.NewInteractiveRedisCache(cmdable)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO, logger, interactiveCache)
	client := ioc.InitSaramaClient()
	interactiveReadEventConsumer := article4.NewInteractiveReadEventConsumer(interactiveRepository, client, logger)
	v3 := ioc.NewConsumers(interactiveReadEventConsumer)
	app := &App{
		webServer: v2,
		consumers: v3,
	}
	return app
}

// wire.go:

var thirdProvider = wire.NewSet(ioc.InitDB, ioc.InitRedis, ioc.InitSaramaClient, ioc.InitLogger, ioc.NewNowFunc, ioc.NewUuidFn)

var eventProvider = wire.NewSet(ioc.NewConsumers, article4.NewInteractiveReadEventConsumer, samarax.NewSamaraxBaseHandler)

var webProvider = wire.NewSet(ioc.InitWebServer, ioc.GinMiddlewares, jwtx.NewRedisHandler, user.NewUserHandler, article3.NewArticleHandler)
