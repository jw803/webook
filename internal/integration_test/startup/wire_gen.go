// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"time"

	"bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/event/orderfile/aws/upload_consumer"
	aws "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/event/orderfile/local"
	aws8 "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/event/slwebhook/access_token/aws"
	aws5 "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/event/slwebhook/invoice/aws"
	aws7 "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/event/slwebhook/member_point_create/aws"
	aws3 "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/event/slwebhook/order_cancel/aws"
	aws2 "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/event/slwebhook/order_create/aws"
	aws6 "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/event/slwebhook/order_delivery_update/aws"
	aws4 "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/event/slwebhook/return_order_create/aws"
	exportinvoiceerpfile "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/job/export_erp_invoice_file"
	exportrefunderpfile "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/job/export_refund_erp_file"
	exportsaleerpfile "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/job/export_sale_erp_file"
	queryoneshiplogisticsorder "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/job/query_oneship_logistics_order"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/web/erp_file"
	orderfile "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/interface/web/order_file"
	excelgenerator "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/pkg/excel_generator"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/internal/repository"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/internal/repository/dao"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/internal/repository/oneship"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/internal/repository/shopline"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/internal/service/client"
	email2 "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/service/email"
	erp_file2 "bitbucket.org/starlinglabs/cst-wstyle-integration/internal/service/erp_file"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/internal/service/invoice"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/internal/service/merchant_config"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/internal/service/order_file_upload_log"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/internal/service/sale_order"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/internal/service/staff"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/pkg/email"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/pkg/storage"
	"bitbucket.org/starlinglabs/cst-wstyle-integration/pkg/storage/local"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitOrderFileHandler(saleOrderDAO dao.SaleOrderDAO, orderFileUploadLogDAO dao.OrderFileUploadLogDAO, merchantConfigDAO dao.MerchantConfigDAO, staffDAO dao.StaffDAO, clientDAO dao.ClientDAO, staffSLOA shopline.StaffOpenAPI, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, emailSvc email.EmailClient, orderDeliveryOneship oneship.OrderDeliveryOneship, saleOrderOneship oneship.SaleOrderOneship, logisticsOrderOneship oneship.LogisticsOrderOneship, nowFunc func() time.Time) *orderfile.OrderFileHandler {
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantConfigDAO)
	logger := InitLogger()
	staffRepository := repository.NewStaffRepository(staffDAO, staffSLOA, merchantConfigRepository, logger)
	staffService := staff.NewStaffService(staffRepository, logger)
	orderFileUploadLogRepository := repository.NewOrderFileUploadLogRepository(orderFileUploadLogDAO, staffRepository)
	storage := local.NewLocalStorage()
	emailService := email2.NewEmailService(emailSvc, storage, logger)
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrderDAO, orderSLOA, returnOrderSLOA, logger)
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	clientRepository := repository.NewClientRepository(clientDAO, logger)
	clientService := client.NewClientService(clientRepository, logger)
	saleOrderService := sale_order.NewSaleOrderService(emailService, saleOrderRepository, merchantConfigService, clientService, orderDeliveryOneship, saleOrderOneship, logisticsOrderOneship, storage, logger, nowFunc)
	producer := aws.NewLocalOrderFileProducer(logger)
	orderFileLogService := order_file_upload_log.NewOrderFileLogService(orderFileUploadLogRepository, saleOrderService, merchantConfigService, clientService, storage, producer, logger, nowFunc)
	orderFileHandler := orderfile.NewOrderFileHandler(staffService, orderFileLogService, clientService, saleOrderService, merchantConfigService, logger, nowFunc)
	return orderFileHandler
}

func InitERPFileHandler(clientDAO dao.ClientDAO, invoiceDao dao.InvoiceDAO, saleOrderDAO dao.SaleOrderDAO, erpOrderFileDAO dao.ERPOrderFileDAO, erpInvoiceFileDAO dao.ERPInvoiceFileDAO, merchantConfigDAO dao.MerchantConfigDAO, staffDAO dao.StaffDAO, staffSLOA shopline.StaffOpenAPI, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, nowFunc func() time.Time, storage2 storage.Storage, emailSvc email.EmailClient, orderDeliveryOneship oneship.OrderDeliveryOneship, saleOrderOneship oneship.SaleOrderOneship, logisticsOrderOneship oneship.LogisticsOrderOneship, excelSaleOrderGeneratorFactory excelgenerator.SaleOrderERPExcelGeneratorFactory, excelInvoiceGeneratorFactory excelgenerator.InvoiceERPExcelGeneratorFactory) *erp_file.ERPFileHandler {
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantConfigDAO)
	logger := InitLogger()
	staffRepository := repository.NewStaffRepository(staffDAO, staffSLOA, merchantConfigRepository, logger)
	staffService := staff.NewStaffService(staffRepository, logger)
	erpOrderFileRepository := repository.NewERPOrderFileRepository(erpOrderFileDAO, staffRepository, logger)
	erpInvoiceFileRepository := repository.NewERPInvoiceFileRepository(erpInvoiceFileDAO, staffRepository, logger)
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	invoiceRepository := repository.NewInvoiceRepository(invoiceDao, orderSLOA, logger)
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrderDAO, orderSLOA, returnOrderSLOA, logger)
	invoiceService := invoice.NewInvoiceService(invoiceRepository, merchantConfigRepository, saleOrderRepository, logger)
	emailService := email2.NewEmailService(emailSvc, storage2, logger)
	clientRepository := repository.NewClientRepository(clientDAO, logger)
	clientService := client.NewClientService(clientRepository, logger)
	saleOrderService := sale_order.NewSaleOrderService(emailService, saleOrderRepository, merchantConfigService, clientService, orderDeliveryOneship, saleOrderOneship, logisticsOrderOneship, storage2, logger, nowFunc)
	erpFileService := erp_file2.NewERPFileService(erpOrderFileRepository, erpInvoiceFileRepository, merchantConfigService, invoiceService, saleOrderService, storage2, nowFunc, emailService, excelSaleOrderGeneratorFactory, excelInvoiceGeneratorFactory, logger)
	erpFileHandler := erp_file.NewERPFileHandler(staffService, erpFileService, logger)
	return erpFileHandler
}

func InitOrderFileUploadConsumer(orderFileUploadDAO dao.OrderFileUploadLogDAO, saleOrderDAO dao.SaleOrderDAO, erpFileUploadLogDAO dao.ERPOrderFileDAO, merchantConfigDAO dao.MerchantConfigDAO, staffDAO dao.StaffDAO, clientDAO dao.ClientDAO, staffSLOA shopline.StaffOpenAPI, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, orderDeliveryOneship oneship.OrderDeliveryOneship, saleOrderOneship oneship.SaleOrderOneship, logisticsOrderOneship oneship.LogisticsOrderOneship, emailSvc email.EmailClient, nowFunc func() time.Time) *upload_consumer.OrderFileEventConsumer {
	sqsClient := InitSQS()
	storageStorage := local.NewLocalStorage()
	logger := InitLogger()
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrderDAO, orderSLOA, returnOrderSLOA, logger)
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantConfigDAO)
	staffRepository := repository.NewStaffRepository(staffDAO, staffSLOA, merchantConfigRepository, logger)
	orderFileUploadLogRepository := repository.NewOrderFileUploadLogRepository(orderFileUploadDAO, staffRepository)
	clientRepository := repository.NewClientRepository(clientDAO, logger)
	emailService := email2.NewEmailService(emailSvc, storageStorage, logger)
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	clientService := client.NewClientService(clientRepository, logger)
	saleOrderService := sale_order.NewSaleOrderService(emailService, saleOrderRepository, merchantConfigService, clientService, orderDeliveryOneship, saleOrderOneship, logisticsOrderOneship, storageStorage, logger, nowFunc)
	orderFileEventConsumer := upload_consumer.NewOrderFileUploadEventConsumer(sqsClient, storageStorage, saleOrderRepository, orderFileUploadLogRepository, clientRepository, merchantConfigRepository, saleOrderService, logger)
	return orderFileEventConsumer
}

func InitSLWebhookOrderCreateConsumer(saleOrderDAO dao.SaleOrderDAO, clientDAO dao.ClientDAO, merchantDAO dao.MerchantConfigDAO, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, orderDeliveryOneship oneship.OrderDeliveryOneship, saleOrderOneship oneship.SaleOrderOneship, logisticsOrderOneship oneship.LogisticsOrderOneship, emailSvc email.EmailClient, nowFunc func() time.Time) *aws2.SLWebhookOrderCreateConsumer {
	sqsClient := InitSQS()
	storageStorage := local.NewLocalStorage()
	logger := InitLogger()
	emailService := email2.NewEmailService(emailSvc, storageStorage, logger)
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrderDAO, orderSLOA, returnOrderSLOA, logger)
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantDAO)
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	clientRepository := repository.NewClientRepository(clientDAO, logger)
	clientService := client.NewClientService(clientRepository, logger)
	saleOrderService := sale_order.NewSaleOrderService(emailService, saleOrderRepository, merchantConfigService, clientService, orderDeliveryOneship, saleOrderOneship, logisticsOrderOneship, storageStorage, logger, nowFunc)
	slWebhookOrderCreateConsumer := aws2.NewSLWebhookOrderCreateConsumer(sqsClient, saleOrderService, logger)
	return slWebhookOrderCreateConsumer
}

func InitCronjobExportERPSaleFile(clientDAO dao.ClientDAO, saleOrderDAO dao.SaleOrderDAO, erpOrderFileDAO dao.ERPOrderFileDAO, erpInvoiceFileDAO dao.ERPInvoiceFileDAO, merchantConfigDAO dao.MerchantConfigDAO, invoiceDAO dao.InvoiceDAO, staffDAO dao.StaffDAO, staffSLOA shopline.StaffOpenAPI, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, storage2 storage.Storage, emailSvc email.EmailClient, timeout time.Duration, nowFunc func() time.Time, orderDeliveryOneship oneship.OrderDeliveryOneship, saleOrderOneship oneship.SaleOrderOneship, logisticsOrderOneship oneship.LogisticsOrderOneship, excelInvoiceGeneratorFactory excelgenerator.InvoiceERPExcelGeneratorFactory, excelSaleOrderGeneratorFactory excelgenerator.SaleOrderERPExcelGeneratorFactory) *exportsaleerpfile.ExportSaleERPFileJob {
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantConfigDAO)
	logger := InitLogger()
	staffRepository := repository.NewStaffRepository(staffDAO, staffSLOA, merchantConfigRepository, logger)
	erpOrderFileRepository := repository.NewERPOrderFileRepository(erpOrderFileDAO, staffRepository, logger)
	erpInvoiceFileRepository := repository.NewERPInvoiceFileRepository(erpInvoiceFileDAO, staffRepository, logger)
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	invoiceRepository := repository.NewInvoiceRepository(invoiceDAO, orderSLOA, logger)
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrderDAO, orderSLOA, returnOrderSLOA, logger)
	invoiceService := invoice.NewInvoiceService(invoiceRepository, merchantConfigRepository, saleOrderRepository, logger)
	emailService := email2.NewEmailService(emailSvc, storage2, logger)
	clientRepository := repository.NewClientRepository(clientDAO, logger)
	clientService := client.NewClientService(clientRepository, logger)
	saleOrderService := sale_order.NewSaleOrderService(emailService, saleOrderRepository, merchantConfigService, clientService, orderDeliveryOneship, saleOrderOneship, logisticsOrderOneship, storage2, logger, nowFunc)
	erpFileService := erp_file2.NewERPFileService(erpOrderFileRepository, erpInvoiceFileRepository, merchantConfigService, invoiceService, saleOrderService, storage2, nowFunc, emailService, excelSaleOrderGeneratorFactory, excelInvoiceGeneratorFactory, logger)
	exportSaleERPFileJob := exportsaleerpfile.NewExportSaleERPFileJob(erpFileService, logger)
	return exportSaleERPFileJob
}

func InitCronjobExportERPRefundFile(clientDAO dao.ClientDAO, saleOrderDAO dao.SaleOrderDAO, erpOrderFileDAO dao.ERPOrderFileDAO, erpInvoiceFileDAO dao.ERPInvoiceFileDAO, merchantConfigDAO dao.MerchantConfigDAO, staffDAO dao.StaffDAO, invoiceDAO dao.InvoiceDAO, staffSLOA shopline.StaffOpenAPI, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, storage2 storage.Storage, emailSvc email.EmailClient, timeout time.Duration, nowFunc func() time.Time, orderDeliveryOneship oneship.OrderDeliveryOneship, logisticsOrderOneship oneship.LogisticsOrderOneship, saleOrderOneship oneship.SaleOrderOneship, excelInvoiceGeneratorFactory excelgenerator.InvoiceERPExcelGeneratorFactory, excelSaleOrderGeneratorFactory excelgenerator.SaleOrderERPExcelGeneratorFactory) *exportrefunderpfile.ExportRefundERPFileJob {
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantConfigDAO)
	logger := InitLogger()
	staffRepository := repository.NewStaffRepository(staffDAO, staffSLOA, merchantConfigRepository, logger)
	erpOrderFileRepository := repository.NewERPOrderFileRepository(erpOrderFileDAO, staffRepository, logger)
	erpInvoiceFileRepository := repository.NewERPInvoiceFileRepository(erpInvoiceFileDAO, staffRepository, logger)
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	invoiceRepository := repository.NewInvoiceRepository(invoiceDAO, orderSLOA, logger)
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrderDAO, orderSLOA, returnOrderSLOA, logger)
	invoiceService := invoice.NewInvoiceService(invoiceRepository, merchantConfigRepository, saleOrderRepository, logger)
	emailService := email2.NewEmailService(emailSvc, storage2, logger)
	clientRepository := repository.NewClientRepository(clientDAO, logger)
	clientService := client.NewClientService(clientRepository, logger)
	saleOrderService := sale_order.NewSaleOrderService(emailService, saleOrderRepository, merchantConfigService, clientService, orderDeliveryOneship, saleOrderOneship, logisticsOrderOneship, storage2, logger, nowFunc)
	erpFileService := erp_file2.NewERPFileService(erpOrderFileRepository, erpInvoiceFileRepository, merchantConfigService, invoiceService, saleOrderService, storage2, nowFunc, emailService, excelSaleOrderGeneratorFactory, excelInvoiceGeneratorFactory, logger)
	exportRefundERPFileJob := exportrefunderpfile.NewExportRefundERPFileJob(erpFileService, logger)
	return exportRefundERPFileJob
}

func InitSLWebhookOrderCancelConsumer(saleOrderDAO dao.SaleOrderDAO, clientDAO dao.ClientDAO, merchantDAO dao.MerchantConfigDAO, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, orderDeliveryOneship oneship.OrderDeliveryOneship, saleOrderOneship oneship.SaleOrderOneship, logisticsOrderOneship oneship.LogisticsOrderOneship, emailSvc email.EmailClient, nowFunc func() time.Time) *aws3.SLWebhookOrderCancelConsumer {
	sqsClient := InitSQS()
	storageStorage := local.NewLocalStorage()
	logger := InitLogger()
	emailService := email2.NewEmailService(emailSvc, storageStorage, logger)
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrderDAO, orderSLOA, returnOrderSLOA, logger)
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantDAO)
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	clientRepository := repository.NewClientRepository(clientDAO, logger)
	clientService := client.NewClientService(clientRepository, logger)
	saleOrderService := sale_order.NewSaleOrderService(emailService, saleOrderRepository, merchantConfigService, clientService, orderDeliveryOneship, saleOrderOneship, logisticsOrderOneship, storageStorage, logger, nowFunc)
	slWebhookOrderCancelConsumer := aws3.NewSLWebhookOrderCancelConsumer(sqsClient, saleOrderService, logger)
	return slWebhookOrderCancelConsumer
}

func InitSLWebhookReturnOrderCreateConsumer(saleOrderDAO dao.SaleOrderDAO, clientDAO dao.ClientDAO, merchantDAO dao.MerchantConfigDAO, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, orderDeliveryOneship oneship.OrderDeliveryOneship, saleOrderOneship oneship.SaleOrderOneship, logisticsOrderOneship oneship.LogisticsOrderOneship, emailSvc email.EmailClient, nowFunc func() time.Time) *aws4.SLWebhookReturnOrderCreateConsumer {
	sqsClient := InitSQS()
	storageStorage := local.NewLocalStorage()
	logger := InitLogger()
	emailService := email2.NewEmailService(emailSvc, storageStorage, logger)
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrderDAO, orderSLOA, returnOrderSLOA, logger)
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantDAO)
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	clientRepository := repository.NewClientRepository(clientDAO, logger)
	clientService := client.NewClientService(clientRepository, logger)
	saleOrderService := sale_order.NewSaleOrderService(emailService, saleOrderRepository, merchantConfigService, clientService, orderDeliveryOneship, saleOrderOneship, logisticsOrderOneship, storageStorage, logger, nowFunc)
	slWebhookReturnOrderCreateConsumer := aws4.NewSLWebhookReturnOrderCreateConsumer(sqsClient, saleOrderService, logger)
	return slWebhookReturnOrderCreateConsumer
}

func InitCronjobExportERPInvoiceFile(clientDAO dao.ClientDAO, invoiceDAO dao.InvoiceDAO, erpOrderFileDAO dao.ERPOrderFileDAO, erpInvoiceFileDAO dao.ERPInvoiceFileDAO, merchantConfigDAO dao.MerchantConfigDAO, saleOrder dao.SaleOrderDAO, staffDAO dao.StaffDAO, staffSLOA shopline.StaffOpenAPI, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, storage2 storage.Storage, emailSvc email.EmailClient, timeout time.Duration, nowFunc func() time.Time, orderDeliveryOneship oneship.OrderDeliveryOneship, logisticsOrderOneship oneship.LogisticsOrderOneship, saleOrderOneship oneship.SaleOrderOneship, excelSaleOrderGeneratorFactory excelgenerator.SaleOrderERPExcelGeneratorFactory, excelInvoiceGeneratorFactory excelgenerator.InvoiceERPExcelGeneratorFactory) *exportinvoiceerpfile.ExportERPInvoiceFileJob {
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantConfigDAO)
	logger := InitLogger()
	staffRepository := repository.NewStaffRepository(staffDAO, staffSLOA, merchantConfigRepository, logger)
	erpOrderFileRepository := repository.NewERPOrderFileRepository(erpOrderFileDAO, staffRepository, logger)
	erpInvoiceFileRepository := repository.NewERPInvoiceFileRepository(erpInvoiceFileDAO, staffRepository, logger)
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	invoiceRepository := repository.NewInvoiceRepository(invoiceDAO, orderSLOA, logger)
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrder, orderSLOA, returnOrderSLOA, logger)
	invoiceService := invoice.NewInvoiceService(invoiceRepository, merchantConfigRepository, saleOrderRepository, logger)
	emailService := email2.NewEmailService(emailSvc, storage2, logger)
	clientRepository := repository.NewClientRepository(clientDAO, logger)
	clientService := client.NewClientService(clientRepository, logger)
	saleOrderService := sale_order.NewSaleOrderService(emailService, saleOrderRepository, merchantConfigService, clientService, orderDeliveryOneship, saleOrderOneship, logisticsOrderOneship, storage2, logger, nowFunc)
	erpFileService := erp_file2.NewERPFileService(erpOrderFileRepository, erpInvoiceFileRepository, merchantConfigService, invoiceService, saleOrderService, storage2, nowFunc, emailService, excelSaleOrderGeneratorFactory, excelInvoiceGeneratorFactory, logger)
	exportERPInvoiceFileJob := exportinvoiceerpfile.NewExportERPInvoiceFileJob(erpFileService, logger)
	return exportERPInvoiceFileJob
}

func InitWebhookInvoiceCreateConsumer(merchantConfigDAO dao.MerchantConfigDAO, saleOrderDAO dao.SaleOrderDAO, invoiceDAO dao.InvoiceDAO, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, nowFunc func() time.Time) *aws5.InvoiceCreateConsumer {
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantConfigDAO)
	logger := InitLogger()
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	invoiceRepository := repository.NewInvoiceRepository(invoiceDAO, orderSLOA, logger)
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrderDAO, orderSLOA, returnOrderSLOA, logger)
	invoiceService := invoice.NewInvoiceService(invoiceRepository, merchantConfigRepository, saleOrderRepository, logger)
	sqsClient := InitSQS()
	invoiceCreateConsumer := aws5.NewInvoiceCreateConsumer(merchantConfigService, invoiceService, sqsClient, logger)
	return invoiceCreateConsumer
}

func InitWebhookInvoiceUpdateConsumer(merchantConfigDAO dao.MerchantConfigDAO, saleOrderDAO dao.SaleOrderDAO, invoiceDAO dao.InvoiceDAO, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, nowFunc func() time.Time) *aws5.InvoiceUpdateConsumer {
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantConfigDAO)
	logger := InitLogger()
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	invoiceRepository := repository.NewInvoiceRepository(invoiceDAO, orderSLOA, logger)
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrderDAO, orderSLOA, returnOrderSLOA, logger)
	invoiceService := invoice.NewInvoiceService(invoiceRepository, merchantConfigRepository, saleOrderRepository, logger)
	sqsClient := InitSQS()
	invoiceUpdateConsumer := aws5.NewInvoiceUpdateConsumer(merchantConfigService, invoiceService, sqsClient, logger)
	return invoiceUpdateConsumer
}

func InitSLWebhookOrderDeliveryUpdateConsumer(saleOrderDAO dao.SaleOrderDAO, clientDAO dao.ClientDAO, merchantDAO dao.MerchantConfigDAO, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, orderDeliveryOneship oneship.OrderDeliveryOneship, logisticsOneship oneship.LogisticsOrderOneship, saleOrderOneship oneship.SaleOrderOneship, emailSvc email.EmailClient, nowFunc func() time.Time) *aws6.SLWebhookOrderDeliveryUpdateConsumer {
	sqsClient := InitSQS()
	storageStorage := local.NewLocalStorage()
	logger := InitLogger()
	emailService := email2.NewEmailService(emailSvc, storageStorage, logger)
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrderDAO, orderSLOA, returnOrderSLOA, logger)
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantDAO)
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	clientRepository := repository.NewClientRepository(clientDAO, logger)
	clientService := client.NewClientService(clientRepository, logger)
	saleOrderService := sale_order.NewSaleOrderService(emailService, saleOrderRepository, merchantConfigService, clientService, orderDeliveryOneship, saleOrderOneship, logisticsOneship, storageStorage, logger, nowFunc)
	slWebhookOrderDeliveryUpdateConsumer := aws6.NewSLWebhookOrderDeliveryUpdateConsumer(sqsClient, saleOrderService, logger)
	return slWebhookOrderDeliveryUpdateConsumer
}

func InitSLWebhookMemberPointCreateConsumer(saleOrderDAO dao.SaleOrderDAO, clientDAO dao.ClientDAO, merchantDAO dao.MerchantConfigDAO, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, orderDeliveryOneship oneship.OrderDeliveryOneship, logisticsOneship oneship.LogisticsOrderOneship, saleOrderOneship oneship.SaleOrderOneship, emailSvc email.EmailClient, nowFunc func() time.Time) *aws7.SLWebhookMemberPointCreateConsumer {
	sqsClient := InitSQS()
	storageStorage := local.NewLocalStorage()
	logger := InitLogger()
	emailService := email2.NewEmailService(emailSvc, storageStorage, logger)
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrderDAO, orderSLOA, returnOrderSLOA, logger)
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantDAO)
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	clientRepository := repository.NewClientRepository(clientDAO, logger)
	clientService := client.NewClientService(clientRepository, logger)
	saleOrderService := sale_order.NewSaleOrderService(emailService, saleOrderRepository, merchantConfigService, clientService, orderDeliveryOneship, saleOrderOneship, logisticsOneship, storageStorage, logger, nowFunc)
	slWebhookMemberPointCreateConsumer := aws7.NewSLWebhookMemberPointCreateConsumer(sqsClient, saleOrderService, logger)
	return slWebhookMemberPointCreateConsumer
}

func InitSLWebhookAppInstallationTokenCreateConsumer(merchantDAO dao.MerchantConfigDAO, nowFunc func() time.Time) *aws8.AppInstallationTokenCreateConsumer {
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantDAO)
	sqsClient := InitSQS()
	logger := InitLogger()
	appInstallationTokenCreateConsumer := aws8.NewAppInstallationTokenCreateConsumer(merchantConfigRepository, sqsClient, logger)
	return appInstallationTokenCreateConsumer
}

func InitCronjobQueryOneshipLogisticsOrder(clientDAO dao.ClientDAO, saleOrderDAO dao.SaleOrderDAO, erpOrderFileDAO dao.ERPOrderFileDAO, erpInvoiceFileDAO dao.ERPInvoiceFileDAO, merchantConfigDAO dao.MerchantConfigDAO, staffDAO dao.StaffDAO, invoiceDAO dao.InvoiceDAO, staffSLOA shopline.StaffOpenAPI, orderSLOA shopline.OrderOpenAPI, returnOrderSLOA shopline.ReturnOrderOpenAPI, storage2 storage.Storage, timeout time.Duration, nowFunc func() time.Time, orderDeliveryOneship oneship.OrderDeliveryOneship, logisticsOrderOneship oneship.LogisticsOrderOneship, saleOrderOneship oneship.SaleOrderOneship, emailSvc email.EmailClient, excelInvoiceGeneratorFactory excelgenerator.InvoiceERPExcelGeneratorFactory, excelSaleOrderGeneratorFactory excelgenerator.SaleOrderERPExcelGeneratorFactory) *queryoneshiplogisticsorder.QueryOneshipLogisticsOrderJob {
	logger := InitLogger()
	emailService := email2.NewEmailService(emailSvc, storage2, logger)
	saleOrderRepository := repository.NewSaleOrderRepository(saleOrderDAO, orderSLOA, returnOrderSLOA, logger)
	merchantConfigRepository := repository.NewMerchantConfigRepository(merchantConfigDAO)
	merchantConfigService := merchant_config.NewMerchantConfigService(merchantConfigRepository, logger)
	clientRepository := repository.NewClientRepository(clientDAO, logger)
	clientService := client.NewClientService(clientRepository, logger)
	saleOrderService := sale_order.NewSaleOrderService(emailService, saleOrderRepository, merchantConfigService, clientService, orderDeliveryOneship, saleOrderOneship, logisticsOrderOneship, storage2, logger, nowFunc)
	queryOneshipLogisticsOrderJob := queryoneshiplogisticsorder.NewQueryOneshipLogisticsOrderJob(saleOrderService, logger)
	return queryOneshipLogisticsOrderJob
}

// wire.go:

var thirdProvider = wire.NewSet(InitMongoDBClient, InitMongoDB, InitLogger)

var storageProvider = wire.NewSet(local.NewLocalStorage)

var webServerProvider = wire.NewSet()

var eventConsumerProvider = wire.NewSet(NewConsumers, upload_consumer.NewOrderFileUploadEventConsumer)

var webhookConsumerProvider = wire.NewSet(NewConsumers, aws5.NewInvoiceCreateConsumer, aws5.NewInvoiceUpdateConsumer)

var eventProducerProvider = wire.NewSet(aws.NewLocalOrderFileProducer)
