// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"github.com/google/wire"
	"github.com/jw803/webook/internal/interface/web/article"
	"github.com/jw803/webook/internal/interface/web/user"
	"github.com/jw803/webook/internal/pkg/ginx/jwt_handler"
	"github.com/jw803/webook/internal/repository"
	"github.com/jw803/webook/internal/repository/cache"
	"github.com/jw803/webook/internal/repository/dao"
	"github.com/jw803/webook/internal/service"
	"github.com/jw803/webook/ioc"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitApp(db *gorm.DB, redis2 redis.Cmdable) *user.UserHandler {
	userDAO := dao.NewGORMUserDAO(db)
	userCache := cache.NewUserCacheV1()
	userRepository := repository.NewCachedUserRepository(userDAO, userCache)
	logger := ioc.InitLogger()
	userService := service.NewUserService(userRepository, logger)
	codeCache := cache.NewRedisCodeCache(redis2, logger)
	codeRepository := repository.NewCachedCodeRepository(codeCache)
	smsService := ioc.InitSmsMemoryService(redis2)
	codeService := service.NewSMSCodeService(codeRepository, smsService)
	jwtHandler := jwtx.NewRedisHandler(redis2)
	userHandler := user.NewUserHandler(userService, codeService, jwtHandler, logger)
	return userHandler
}

// wire.go:

var eventProvider = wire.NewSet(ioc.NewConsumers)

var webProvider = wire.NewSet(jwtx.NewRedisHandler, user.NewUserHandler, article.NewArticleHandler, ioc.GinMiddlewares, ioc.InitWebServer)
